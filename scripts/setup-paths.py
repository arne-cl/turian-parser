#!/usr/bin/python2.4
#
#
#######################################################################
#
#
#   setup-paths.py
#
#   Set up path variables, updating variables.py and variables.pm if
#   they already exist.
#   Also:
#   1. Point all variables.py to the one in scripts/
#   2. Point all variables.pm to the one in scripts/
#   3. Remove all variables.pyc
#
#   usage: setup-paths.py [options]
#
#   options:
#   -h, --help            show this help message and exit
#   -b BASE, --basedir=BASE, --base-dir=BASE, --base=BASE
#   Base directory of this instance of the system.
#   Everything under this directory should pertain to a
#   particular set of experimental conditions.
#   -s SCRIPTS, --scriptdir=SCRIPTS, --script-dir=SCRIPTS, --scriptsdir=SCRIPTS, --scripts-dir=SCRIPTS, --scripts=SCRIPTS, --script=SCRIPTS
#   -d DATA, --datadir=DATA, --data-dir=DATA, --data=DATA
#
#
#   $Id: setup-paths.py 1657 2006-06-04 03:03:05Z turian $
#
#
#######################################################################
# Copyright (c) 2004-2006, New York University. All rights reserved
#######################################################################

from path import wrap

import os.path, sys, string, re
from optparse import OptionParser
from os.path import isdir, isfile, join, commonprefix

parser = OptionParser()
parser.add_option("-b", "--basedir", "--base-dir", "--base", default=".",
		dest="base", help="Base directory of this instance of the system. Everything under this directory should pertain to a particular set of experimental conditions.")
parser.add_option("-s", "--scriptdir", "--script-dir", "--scriptsdir", "--scripts-dir", "--scripts", "--script", dest="scripts", default="scripts")
parser.add_option("-d", "--datadir", "--data-dir", "--data", dest="data", default="data")

import path

def align(str):
	assert len(str) <= 12
	while len(str) < 12:
		str = " " + str
	return str

(options, args) = parser.parse_args()

all = ["base", "scripts", "data"]
dir = {}
dir["base"]	= options.base
dir["scripts"]	= options.scripts
dir["data"]	= options.data
dir["home"]	= "/home/turian"

#thisdir = os.path.realpath(os.getcwd())
thisdir = wrap(os.getcwd())
path.set_base(thisdir)
sys.stderr.write("%s directory:\t%s\n" % (align("current"), thisdir))
dir.keys().sort()
for d in all:
	#dir[d] = os.path.realpath(dir[d])
	dir[d] = wrap(dir[d])
	sys.stderr.write("%s directory:\t%s\n" % (align(d), dir[d]))

alldirs = [d for d in dir.values()]

for d in alldirs:
	if not isdir(d):
		sys.stderr.write("FATAL: Directory does not exist:\n%s\n" % d)
	assert isdir(d)

if commonprefix(alldirs + [thisdir]) != thisdir:
	sys.stderr.write("\nWARNING: Directories do not share common prefix with current directory.\n")
	sys.stderr.write("\tCommon prefix:\t%s\n" % commonprefix(alldirs))

for d in all:
	if commonprefix([dir[d], thisdir]) != thisdir:
		sys.stderr.write("WARNING %s isn't a sub-directory of this dir:\t%s\n" % (d, dir[d]))
for d in all:
	if commonprefix([dir[d], dir["base"]]) != thisdir:
		sys.stderr.write("WARNING %s isn't a sub-directory of base dir:\t%s\n" % (d, dir[d]))

header = ""
header += "\n"
header += "############################################################################\n"
header += "############################################################################\n"
header += "###               THIS FILE WAS AUTOMATICALLY GENERATED BY               ###\n"
header += "###                       scripts/setup-paths.py                         ###\n"
header += "############################################################################\n"
header += "############################################################################\n"
replace_header = re.compile(header)

valid_variable = re.compile("^[A-Za-z_\$]+$")
fix_dollar = re.compile("\$")
def update_file(file, updates):
	variable_regexes = []
	for var in updates:
		assert valid_variable.match(var)
		grep_variable = "^\s*%s\s*=\s*.*" % fix_dollar.sub('\$', var)
		variable_regexes.append(re.compile(grep_variable))

	sys.stderr.write("Updating: %s\n" % path.shorten(file))
	origfile = file
	if not isfile(origfile):
		tmpl = file + ".tmpl"
		sys.stderr.write("\tNOTE: %s does not exist. Using %s...\n" % (path.shorten(file), path.shorten(tmpl)))
		origfile = tmpl
	assert isfile(origfile)

	newtxt = ""
	newtxt += "\n"
	vars = updates.keys()
	vars.sort()
#	newtxt += "home_dir = \"/home/turian\"\n"
	for var in vars:
		newtxt += "%s = \"%s\";\n" % (var, dir[updates[var]])
	newtxt += "\n"
	newtxt += "\n"

	f = open(origfile, "rt")
	for l in f:
		# Skip any line that matches one of the variables
		found = False
		for r in variable_regexes:
			if r.match(l):
				#sys.stderr.write("Skipping: %s" % l)
				found = True
				break
		if not found: newtxt += l
	f.close()

	newtxt = header + replace_header.sub("", newtxt)
	f = open(file, "wt")
	f.write(newtxt)
	f.close()

py_file = os.path.join(dir["scripts"], "variables.py")
#py_updates = {"base_dir": "base",
py_updates = {"system_dir": "base",
"scripts_dir": "scripts",
"data_dir": "data",
"home_dir": "home"}

pm_file = os.path.join(dir["scripts"], "variables.pm")
pm_updates = {"$basedir": "base",
"$datadir": "data",
"$scriptdir": "scripts"}

sys.stderr.write("\n")
update_file(py_file, py_updates)
update_file(pm_file, pm_updates)


#### Refresh links

def refresh_links(base, scripts):
	def link(filename, orig_dir):
		goodfile = join(orig_dir, filename)
		assert goodfile in allfiles

		for (dirpath, dirnames, filenames) in walkfiles:
			for f in filenames:
				if f == filename:
					sym = join(dirpath, f)
					sys.stderr.write("\tLinking %s (to %s)\n" % (path.shorten(sym), path.shorten(goodfile)))
					os.symlink(goodfile, sym)

	assert isdir(base)
	assert isdir(scripts)

	sys.stderr.write("\n\nRefreshing links below %s...\n" % base)
	path.set_base(base)

	import os
	# Retrieve all files below the base dir
	walkfiles = os.walk(base)
	allfiles = []
	for (dirpath, dirnames, filenames) in walkfiles:
		# Remove all variables.pyc
		for f in filenames:
			if f == "variables.pyc": os.remove(join(dirpath, f))
			else: allfiles.append(join(dirpath, f))
	
	# Point all variables.py to the one in scripts/
	link("variables.py", scripts)
	
	# Point all variables.pm to the one in scripts/
	link("variables.pm", scripts)

refresh_links(dir["base"], dir["scripts"])
